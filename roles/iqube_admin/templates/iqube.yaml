ssh:
    profiles:
        nodes:
            key: /root/iqube/id_ssh
            user: root
            port: 22

cluster:
    nodes:
{% for node in groups['iqube_controller'] %}
        - name: {{ node }}
          roles:
            - controller
            - worker
          ssh:
            host: {{ hostvars[node]['iqube_ssh_host'] }}
            profile: nodes
{% endfor %}

    bootstrap:
        control-plane-vip: {{ iqube_control_plane_vip }}
        load-balancer:
            enabled: true
            ip-range:
                start: {{ iqube_ip_range_start }}
                end: {{ iqube_ip_range_end }}

    provisioners:
        - image: /usr/local/share/iqube/fuzzball-stack.sif
          config:
            # local storage for various services, each associated to a local path on nodes
            local-storages:
              database: /var/lib/fuzzball/compute/bootstrap/database-storage
              registry: /var/lib/fuzzball/compute/bootstrap/registry-storage
              scheduler: /var/lib/fuzzball/compute/bootstrap/scheduler-storage

            tls:
                # Generate self signed certificates for services
                self-signed: true

                # To specify a custom CA, you can remove commented line below, all fields are required
                # self-signed-custom:
                #   root-ca: /tmp/rootCA.crt
                #   certificate: /tmp/rootCA.crt
                #   key: /tmp/rootCA.key

                # Use let's encrypt to generate certificates (must allow incoming connection from internet)
                lets-encrypt: null

            services:
                fuzzball:
                    # Fuzzball api service hostname (default: api.10.240.0.100.nip.io)
                    hostname: ""

                    # Fuzzball web UI service hostname (default: fuzzball.10.240.0.100.nip.io)
                    ui:
                      hostname: ""

                    # Shared filesystem on nodes to be used by fuzzball services
                    sharedfs-directory: {{ fuzzball_sharedfs_directory }}

                    # Scheduling algorithm to be used by the scheduler. The standard for on premise without a
                    # provision service deployed is "greedy" which will use existing substrate compute nodes
                    # to execute workflow jobs
                    schedule:
                      strategy: "greedy"

                    # List of trusted container registries when they are only accessible via HTTPS.
                    # Take host:port form and registries must be accessible from the cluster nodes.
                    # secure-registries:
                    #   - an.example.com:443

                authentication:
                    # Authentication service hostname (default: auth.10.240.0.100.nip.io)
                    hostname: ""

                    # Admin password for admin panel access (default: random value)
                    admin-password: ""

                    # Main realm name (default: CtrlIQ)
                    realm: ""

                    # LDAP user federation for the main realm, enabled only when connection URL is set
                    ldap:
                      # LDAP connection URL (must start with ldap:// or ldaps://)
                      url: ""

                      # Use STARTTLS for the LDAP connection
                      start-tls: false

                      # LDAP vendor used can take as value:
                      # - AD: Active Directory
                      # - RHDS: RedHat Directory Service
                      # - TIVOLI: IBM Tivoli Directory Server
                      # - EDIRECTORY: Novell eDirectory
                      # - OTHER: OpenLDAP ...
                      vendor: OTHER

                      # Bind DN for accessing LDAP server (use bind none method if empty)
                      bind-dn: ""

                      # Bind password for accessing LDAP server
                      bind-password: ""

                      # Search scope (either single or subtree)
                      search-scope: single

                      # User lookup configuration
                      users:
                        # Full DN where users are
                        dn: "cn=users,cn=accounts,dc=test,dc=lab"

                        attributes:
                          # Name of LDAP attribute used for username
                          username: uid
                          # Name of LDAP attribute used as RDN (top attribute) for user DN
                          rdn: uid
                          # Name of LDAP attribute used as a unique object identifier for LDAP objects
                          uuid: entryUUID
                          # Name of LDAP attribute used for UID number
                          uid-number: uidNumber
                          # Name of LDAP attribute used for primary GID number
                          gid-number: gidNumber

                        # Object classes that a user entry must contain
                        objectclasses:
                          - inetOrgPerson
                          - organizationalPerson

                        # Optional LDAP filter for filtering users, must start with '(' and end with ')'
                        filter: ""

                      # Group lookup configuration
                      groups:
                        # Full DN where groups are
                        dn: "cn=groups,cn=accounts,dc=test,dc=lab"

                        # Attribute type for group membership:
                        # - DN: means that group members are declared by using full DN form
                        # - UID: means that group members are declared by using UID form
                        membership-attribute-type: DN

                        # User groups strategy:
                        # - GET_GROUPS_FROM_USER_MEMBEROF_ATTRIBUTE: groups of users will be retrieved from attribute specified by 'member-of'
                        # - LOAD_GROUPS_BY_MEMBER_ATTRIBUTE: groups of users will be retrieved by sending query to retrieve groups from 'group-membership' attribute
                        #   where user is listed in
                        user-groups-strategy: GET_GROUPS_FROM_USER_MEMBEROF_ATTRIBUTE

                        attributes:
                          # Name of LDAP attribute in group used for group name
                          group-name: cn
                          # Name of LDAP attribute in group used for group membership mapping
                          group-membership: member
                          # Name of LDAP attribute in user used for group membership mapping (only membership-attribute-type is set to DN)
                          user-membership: uid
                          # Name of LDAP attribute in user containing the groups (only if user-group-strategy is set to GET_GROUPS_FROM_USER_MEMBEROF_ATTRIBUTE)
                          member-of: memberOf
                          # Name of LDAP attribute used for GID number
                          gid-number: gidNumber

                        # Object classes that a group entry must contain
                        objectclasses:
                          - groupOfNames

                        # Optional LDAP filter for filtering groups, must start with '(' and end with ')'
                        filter: ""

                registry:
                    # Registry service hostname (default: registry.10.240.0.100.nip.io)
                    hostname: ""
                    # Enable/disable registry installation
                    enabled: true
